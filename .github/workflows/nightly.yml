name: nightly
on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY_IMAGE: eranrund/muslrust

jobs:
  build:
    name: 'Nightly Build'
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            dockerfile: Dockerfile.x86_64
          - platform: linux/arm64
            dockerfile: Dockerfile.arm64
    steps:
    - uses: 'actions/checkout@v2'
    - uses: extractions/setup-just@v1

    - name: Login to DockerHub
      # TODO if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: eranrund
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Prepare
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_IMAGE }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build nightly image
      id: build
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ matrix.platform }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
        file:  ${{ matrix.dockerfile }}
        push: false
        build-args: |
          CHANNEL=nightly
          #tags: eranrund/muslrust:temp

    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        echo "digest: $digest"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

    - name: Store rust version
      shell: bash
      run: |
        docker run eranrund/muslrust@${{ steps.build.outputs.digest }} rustc --version
        RUST_VER="$(docker run eranrund/muslrust@${{ steps.build.outputs.digest }} rustc --version | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]")"
        echo $RUST_VER > /tmp/rust-version
       
    - name: Upload tags
      uses: actions/upload-artifact@v4
      with:
        name: rust-version
        path: /tmp/rust-version
        if-no-files-found: error
        retention-days: 1


#     - name: Run tests
#       shell: bash
#       run: just test
# 
#     - name: Push image under computed tags
#       uses: docker/build-push-action@v2
#       with:
#         context: .
#         build-args: |
#           CHANNEL=nightly
#         push: ${{ github.event_name != 'pull_request' }}
#         tags: eranrund/muslrust:latest,${{ env.TAG1 }},${{ env.TAG2 }},${{ env.TAG3 }}

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      -
        name: Download rust version
        uses: actions/download-artifact@v4
        with:
          path: /tmp/rust-version
          name: rust-version
 
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: eranrund
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          RUST_DATE="$(date +"%Y-%m-%d")"
          RUST_CHANNEL=nightly

          for tag in latest ${RUST_CHANNEL}${RUST_CHANNEL}-${RUST_DATE} $(cat /tmp/rust-version); do
            docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${tag} \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
          done

      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest
